(plus 3 4)
(plus (plus 3 4) (plus 5 6))
(lessthan 4 5)
(lessthan 5 4)
(quote 3)
(quote (1 2 3))
'(1 2 3)
(car (quote (1 2 3)))
(cdr (quote (1 2 3)))
(cons 7 (quote (8 9)))
(isnull (quote ()))
(isnull (quote (1 2)))
(define a 3)
a
(define b (quote (10 20 30)))
b
(plus a 4)
(car b)
(let ((x 10)) x)
(let ((x 1)(y 2)) (plus x y))
(let ((x (lessthan 4 5))) x)
(if #f 10 20)
(if #t 10 20)
(if (lessthan 4 5) 10 20)
(if (lessthan 5 4) 10 20)
((lambda (x) x) 7)
((lambda (x y) (plus x y)) 201 302)
(define b (lambda (x y) (plus x y)))
(b 12 13)
(let ((x 1)(y 2)) (b x y))
(let ((y 2)) (b a y))
(define doublelist (lambda (x) (if (isnull x) '() (cons (plus (car x) (car x)) (doublelist (cdr x))))))
(doublelist '(1 2 3))
(define length (lambda (x) (if (isnull x) 0 (plus 1 (length (cdr x))))))
(length '())
(length '( 1 2 3))
(length '( 1 2 (3 4) (4 5)))
